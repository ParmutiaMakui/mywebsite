---
title: "Data Manipulation in R with dplyr"
subtitle: "ICRAFuseR Beginner Series"
author: "Parmutia Makui"
date: "2019-12-05"
output: 
  slidy_presentation:
    highlight: pygments
    icremental: true
    fig.align: center
    footer: "ICRAFuseR 2019"
tags: ["rmarkdown", "dplyr", "tidyverse", "training"]
---

<script src="/rmarkdown-libs/header-attrs/header-attrs.js"></script>


<div id="introduction" class="section level1">
<h1>Introduction</h1>
<ul>
<li>Data manipulation is a way(s) of modifying a dataset</li>
<li>Is the process of making data more organized.</li>
<li>This involves ways of <strong>selecting, inserting, deleting, sorting</strong> and <strong>summarising</strong> data.</li>
<li>Common packages used in data manipulation in R are:
<ul>
<li><strong>dplyr</strong></li>
<li><strong>data.table</strong></li>
</ul></li>
<li>Each of packages has its own pros and cons.</li>
<li>We will focus on <a href="https://dplyr.tidyverse.org/"><strong>dplyr</strong></a> in this tutorial</li>
</ul>
</div>
<div id="using-dplyr-for-data-manipulation" class="section level1">
<h1>Using dplyr for data manipulation</h1>
<ul>
<li>dplyr is part of the <a href="https://www.tidyverse.org/"><strong>tidyverse</strong></a></li>
<li>dplyr has 5 main verbs used for the common data manipulation tasks.
<ul>
<li><strong>select</strong> - use to select one or more columns</li>
<li><strong>filter</strong> - used to select rows/cases based on a particular criteria</li>
<li><strong>arrange</strong> - sort data based on one or more columns</li>
<li><strong>mutate</strong> - used to compute new columns</li>
<li><strong>summarise</strong> - used to compute data summaries base on particular column(s)</li>
</ul></li>
<li>Renaming variables</li>
<li>Combining variables and observations</li>
<li>Combining datasets</li>
</ul>
</div>
<div id="manipulating-variables-dplyrselect" class="section level1">
<h1>Manipulating variables: dplyr::select()</h1>
<ul>
<li>dplyr::select() helps in creating subsets with specific variables or exclude various variables</li>
<li>It is used to select one or more columns from a data frame.</li>
<li>Below are several examples using <strong>select</strong> function from dplyr</li>
</ul>
<pre class="r"><code># option one
# select variables by writing their names explicitly
data_sub &lt;- select(data_kphc,
                   county_name, county_region, hhsize_2019)

# option two
# select variables using by giving a range between two variables
data_sub &lt;- select(data_kphc,
       county_code:county_region)

# option three 
# use of helper functions within select
# starts_with()
# ends_with()
# contains()
data_sub &lt;- select(data_kphc,
                   starts_with(&quot;county&quot;),
                   starts_with(&quot;hhsize&quot;))

# display results
data_sub</code></pre>
<pre><code>## # A tibble: 47 x 5
##    county_code county_name  county_region hhsize_2009 hhsize_2019
##          &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;         &lt;lgl&gt;             &lt;dbl&gt;
##  1           1 MOMBASA      Coast         NA                  3.1
##  2           2 KWALE        Coast         NA                  5  
##  3           3 KILIFI       Coast         NA                  4.8
##  4           4 TANA RIVER   Coast         NA                  4.6
##  5           5 LAMU         Coast         NA                  3.7
##  6           6 TAITA TAVETA Coast         NA                  3.5
##  7           7 GARISSA      North Eastern NA                  5.9
##  8           8 WAJIR        North Eastern NA                  6.1
##  9           9 MANDERA      North Eastern NA                  6.9
## 10          10 MARSABIT     North Eastern NA                  5.8
## # … with 37 more rows</code></pre>
<pre class="r"><code># select variables that contain county in their names
select(data_kphc,
       contains(&quot;county&quot;))</code></pre>
<pre><code>## # A tibble: 47 x 3
##    county_code county_name  county_region
##          &lt;dbl&gt; &lt;chr&gt;        &lt;chr&gt;        
##  1           1 MOMBASA      Coast        
##  2           2 KWALE        Coast        
##  3           3 KILIFI       Coast        
##  4           4 TANA RIVER   Coast        
##  5           5 LAMU         Coast        
##  6           6 TAITA TAVETA Coast        
##  7           7 GARISSA      North Eastern
##  8           8 WAJIR        North Eastern
##  9           9 MANDERA      North Eastern
## 10          10 MARSABIT     North Eastern
## # … with 37 more rows</code></pre>
</div>
<div id="section" class="section level1">
<h1></h1>
<ul>
<li>You can also use <strong>select</strong> to remove variables from a data set as shown below</li>
<li>Below were remove <strong>voter_turnout</strong> and <strong>households_2009</strong> variables from the data</li>
</ul>
<pre class="r"><code># remove voter_turnout from the dataset
data_sub &lt;- select(data_kphc,
                   -voter_turnout)

# names of columns in the new dataset
names(data_sub)</code></pre>
<pre><code>##  [1] &quot;county_code&quot;       &quot;county_name&quot;       &quot;county_region&quot;    
##  [4] &quot;population_2009&quot;   &quot;population_2019&quot;   &quot;registered_voters&quot;
##  [7] &quot;households_2009&quot;   &quot;households_2019&quot;   &quot;hhsize_2009&quot;      
## [10] &quot;hhsize_2019&quot;</code></pre>
<pre class="r"><code># remover voter_turnout and households_2009 from the dataset
data_sub &lt;- select(data_kphc, 
                   -c(voter_turnout, households_2009))

# names of columns in the new dataset
names(data_sub)</code></pre>
<pre><code>## [1] &quot;county_code&quot;       &quot;county_name&quot;       &quot;county_region&quot;    
## [4] &quot;population_2009&quot;   &quot;population_2019&quot;   &quot;registered_voters&quot;
## [7] &quot;households_2019&quot;   &quot;hhsize_2009&quot;       &quot;hhsize_2019&quot;</code></pre>
<pre class="r"><code># display the first 3 cases fo the results
data_sub[1:3,]</code></pre>
<pre><code>## # A tibble: 3 x 9
##   county_code county_name county_region population_2009 population_2019
##         &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;                   &lt;dbl&gt;           &lt;dbl&gt;
## 1           1 MOMBASA     Coast                  939370         1208333
## 2           2 KWALE       Coast                  649931          866820
## 3           3 KILIFI      Coast                 1109735         1453787
## # … with 4 more variables: registered_voters &lt;dbl&gt;, households_2019 &lt;dbl&gt;,
## #   hhsize_2009 &lt;lgl&gt;, hhsize_2019 &lt;dbl&gt;</code></pre>
</div>
<div id="manipulating-observations-dplyrfilter" class="section level1">
<h1>Manipulating observations: dplyr::filter()</h1>
<ul>
<li>It is used with logical statements to select cases that meet a given criteria/condition</li>
<li>Below we select data for <strong>Nairobi county</strong></li>
</ul>
<pre class="r"><code># filter all data for NAIROBI CITY
data_sub &lt;- filter(data_kphc,
                   county_name==&quot;NAIROBI CITY&quot;)

# number of rows and columns in NAIROBI CITY data
dim(data_sub)</code></pre>
<pre><code>## [1]  1 11</code></pre>
</div>
<div id="arrange-cases-dplyrarrange" class="section level1">
<h1>Arrange cases: dplyr::arrange()</h1>
<ul>
<li>Used to order rows of data</li>
<li>Can be used with one column or multiple columns</li>
<li>Below we use <strong>arrange</strong> to sort the data set based on <strong>county_region</strong> column</li>
</ul>
<pre class="r"><code># using one column to arrange/sort data
data_sub &lt;- arrange(data_kphc, county_region)

# using multiple columns to arrange/sort data
data_sub &lt;- arrange(data_kphc, 
                    county_region, population_2019)</code></pre>
</div>
<div id="compute-new-variables-dplyrmutate" class="section level1">
<h1>Compute new variables: dplyr::mutate()</h1>
<ul>
<li>It is used to compute or add new columns to a data frame</li>
<li>Below we use <strong>mutate</strong> to add a new variable to the dataset</li>
</ul>
<pre class="r"><code># compute proportion change in population and households sizes between 2009 and 2019
data_kphc &lt;- mutate(data_kphc,
                    population_change = round((population_2019 - population_2009)/population_2009*100, 1),
                    households_change = round((households_2019 - households_2009)/households_2009*100, 1))

# summary of population change
summary(data_kphc$population_change)</code></pre>
<pre><code>##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##  -15.40   13.25   20.10   23.94   31.30   87.00</code></pre>
<pre class="r"><code># summary of households change
summary(data_kphc$households_change)</code></pre>
<pre><code>##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
##    0.20   27.50   32.70   36.84   43.65   85.40</code></pre>
</div>
<div id="summarise-observations-dplyrsummarise" class="section level1">
<h1>Summarise observations: dplyr::summarise()</h1>
<ul>
<li>Used to compute summary statistics from the data</li>
<li>Computed below is the average <strong>population_change</strong> value.</li>
<li>This is mostly used with <strong>group by</strong> function when creating summaries.</li>
</ul>
<pre class="r"><code># summarise population change 
# compute average population change for all counties
popchange_summary &lt;- summarise(data_kphc,
                               avg_popchng = mean(population_change))

# display result
popchange_summary</code></pre>
<pre><code>## # A tibble: 1 x 1
##   avg_popchng
##         &lt;dbl&gt;
## 1        23.9</code></pre>
<pre class="r"><code>popchange_region &lt;- data_kphc %&gt;%
  group_by(county_region) %&gt;%
  summarise(avg_popchng = mean(population_change))</code></pre>
<pre><code>## `summarise()` ungrouping output (override with `.groups` argument)</code></pre>
</div>
<div id="renaming-variables-dplyrrename" class="section level1">
<h1>Renaming variables: dplyr::rename()</h1>
<ul>
<li>dplyr::rename() function is used to rename variables</li>
</ul>
<pre class="r"><code># subset of data with variables that start with county
data_sub &lt;- select(data_kphc,
                   starts_with(&quot;county&quot;))

# names of selected variables
names(data_sub)</code></pre>
<pre><code>## [1] &quot;county_code&quot;   &quot;county_name&quot;   &quot;county_region&quot;</code></pre>
<pre class="r"><code># rename county_name variable
# new name in the LHS and the old name in the RHS
# variable names maybe in quotes or not
data_sub &lt;- rename(data_sub,
                   county = county_name)

# variables names after rename
names(data_sub)</code></pre>
<pre><code>## [1] &quot;county_code&quot;   &quot;county&quot;        &quot;county_region&quot;</code></pre>
</div>
<div id="combining-all-or-some-operationssteps" class="section level1">
<h1>Combining all or some operations/steps</h1>
<ul>
<li>Using the <strong>“piping”</strong> operator, we can make our code more readable and be able to combine
several operations in one step.</li>
<li>The <strong>“piping”</strong> operator can be pronounced as <strong>then</strong></li>
<li>Below is a simple example</li>
</ul>
<pre class="r"><code># compute average population change by region
popchange_summary &lt;- data_kphc %&gt;%
  group_by(county_region) %&gt;%
  summarise(avg_pc = round(mean(population_change), 1)) %&gt;%
  arrange(desc(avg_pc)) </code></pre>
<pre><code>## `summarise()` ungrouping output (override with `.groups` argument)</code></pre>
<pre class="r"><code># display the first 5 cases
head(popchange_summary, 5)</code></pre>
<pre><code>## # A tibble: 5 x 2
##   county_region avg_pc
##   &lt;chr&gt;          &lt;dbl&gt;
## 1 Nairobi         40.1
## 2 North Eastern   36.5
## 3 Coast           31  
## 4 Rift Valley     27.4
## 5 Central         18.6</code></pre>
</div>
<div id="section-1" class="section level1">
<h1></h1>
<pre class="r"><code># combining several steps (even plotting) using the pipe operator
data_kphc %&gt;%
  mutate(county_name = str_to_sentence(county_name)) %&gt;%
ggplot(aes(x = reorder(county_name,
                       population_change),
           y = population_change)) +
  geom_line(group = 1, size = 1.5) +
  geom_hline(yintercept = c(0, 25, 50, 75)) +
  theme_pander(base_size = 15, 
            base_family = &quot;sans&quot;) +
  theme(plot.caption = element_text(size = 15, face = &quot;bold&quot;)) +
  scale_y_continuous(breaks = c(0, 25, 50, 75, 100)) +
  coord_flip() +
  labs(x = &quot;County\n&quot;,
       y = &quot;\nProportion (%) change&quot;,
       caption = &quot;PM\n Data source: KPHC&quot;) +
  ggtitle(&quot;Proportion (%) change in population between 2009 and 2019&quot;)</code></pre>
<p><img src="/blog/2019-12-05-dplyr_files/figure-html/piping_operator_2-1.png" width="1152" /></p>
</div>
<div id="combining-variables" class="section level1">
<h1>Combining variables</h1>
<ul>
<li>dplyr::bind_cols() is used to combine variables</li>
<li>The order of cases should be cross-checked before doing this</li>
</ul>
<pre class="r"><code># subset of data with the columns on county variables
data_county &lt;- select(data_kphc,
                      county_code:county_region)

# number of rows and columns in data_county
dim(data_county)</code></pre>
<pre><code>## [1] 47  3</code></pre>
<pre class="r"><code># variable names in data_county
names(data_county)</code></pre>
<pre><code>## [1] &quot;county_code&quot;   &quot;county_name&quot;   &quot;county_region&quot;</code></pre>
<pre class="r"><code># subset of data with variables on population
data_population &lt;- select(data_kphc,
                          starts_with(&quot;pop&quot;))

# number of rows and columns in data_population
dim(data_population)</code></pre>
<pre><code>## [1] 47  3</code></pre>
<pre class="r"><code># variable names in data_population
names(data_population)</code></pre>
<pre><code>## [1] &quot;population_2009&quot;   &quot;population_2019&quot;   &quot;population_change&quot;</code></pre>
<pre class="r"><code># combine columns from data_county and data_population
data_cols &lt;- bind_cols(data_county,
                       data_population)

# number of rows and columns in data_cols
dim(data_cols)</code></pre>
<pre><code>## [1] 47  6</code></pre>
<pre class="r"><code># variable names in data_cols
names(data_cols)</code></pre>
<pre><code>## [1] &quot;county_code&quot;       &quot;county_name&quot;       &quot;county_region&quot;    
## [4] &quot;population_2009&quot;   &quot;population_2019&quot;   &quot;population_change&quot;</code></pre>
</div>
<div id="combining-observations" class="section level1">
<h1>Combining observations</h1>
<ul>
<li>dplyr::bind_rows() is used to combine observations</li>
<li>The names of variables should match!!</li>
</ul>
<pre class="r"><code># subset of coast region counties data
data_coast &lt;- filter(data_kphc,
                     county_region == &quot;Coast&quot;)

# number of rows and colums in data_coast
dim(data_coast)</code></pre>
<pre><code>## [1]  6 13</code></pre>
<pre class="r"><code># variable names in data_coast
# names(data_coast)

# subset of central region counties data
data_central &lt;- filter(data_kphc,
                  county_region == &quot;Central&quot;)

# number of rows and colums in data_central
dim(data_central)</code></pre>
<pre><code>## [1]  5 13</code></pre>
<pre class="r"><code># variable names in data_central
# names(data_central)

# bind cases from both datasets
data_cc &lt;- bind_rows(data_coast,
                     data_central)

# number of rows and colums in data_cc
dim(data_cc)</code></pre>
<pre><code>## [1] 11 13</code></pre>
<pre class="r"><code># variable names in data_cc
# names(data_cc)</code></pre>
</div>
<div id="combining-datasets" class="section level1">
<h1>Combining datasets</h1>
<ul>
<li>This done using <strong>mutating joins</strong></li>
<li>Enables you to combine two tables</li>
</ul>
<pre class="r"><code># variables with county description
data_x &lt;- data_kphc %&gt;%
  select(contains(&quot;county&quot;))

# number of rows and columns in data_x
dim(data_x)</code></pre>
<pre><code>## [1] 47  3</code></pre>
<pre class="r"><code># data on 2019 population  and household size variables
# this data is for only coast and rift valley regions
data_y &lt;- data_kphc %&gt;%
  filter(county_region == &quot;Coast&quot; |
           county_region == &quot;Rift Valley&quot;) %&gt;%
  select(county_code,
         ends_with(&quot;19&quot;))

# number of rows and columns in data_y
dim(data_y)</code></pre>
<pre><code>## [1] 20  4</code></pre>
<div id="dplyrleft_join" class="section level2">
<h2>dplyr::left_join()</h2>
<pre class="r"><code># left_join()
# enables you to combine matching values from table y to table x
# option one
data_xy &lt;- left_join(data_x, data_y, 
                     by = &quot;county_code&quot;)

# option two
data_xy &lt;- data_x %&gt;%
  left_join(data_y,
            by = &quot;county_code&quot;)</code></pre>
</div>
<div id="dplyrright_join" class="section level2">
<h2>dplyr::right_join()</h2>
<pre class="r"><code># right_join()
# enables you to combine matching values from table x to table y
# only maintains values in tably y
# option one
data_xy &lt;- data_x %&gt;%
  right_join(data_y,
            by = &quot;county_code&quot;)

# option two
data_xy &lt;- right_join(data_x, data_y, 
                     by = &quot;county_code&quot;)</code></pre>
</div>
<div id="dplyrinner_join" class="section level2">
<h2>dplyr::inner_join()</h2>
<pre class="r"><code># inner_join()
# maintains only matching values from both x and y tables
data_xy &lt;- data_x %&gt;%
  inner_join(data_y,
            by = &quot;county_code&quot;)

data_xy &lt;- inner_join(data_x, data_y, 
                     by = &quot;county_code&quot;)</code></pre>
</div>
<div id="dplyrfull_join" class="section level2">
<h2>dplyr::full_join()</h2>
<pre class="r"><code># inner_join()
# maintains all values/cases from both tables
# option one
data_xy &lt;- data_x %&gt;%
  full_join(data_y,
            by = &quot;county_code&quot;)

# option two
data_xy &lt;- full_join(data_x, data_y, 
                     by = &quot;county_code&quot;)</code></pre>
</div>
</div>
<div id="general-advice-and-detailed-info" class="section level1">
<h1>General advice and detailed info</h1>
<ul>
<li>Practice, practice and practice some more</li>
<li><a href="https://www.tidyverse.org/packages/">tidyverse website</a></li>
<li><a href="https://dplyr.tidyverse.org/">dplyr website</a></li>
<li>Google is your friend</li>
</ul>
<p><img src="keepatit.jpeg" /></p>
</div>
